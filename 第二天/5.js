{
  let a = 12;
  let b = a;
  b = 13;
  console.log(a);//12
  let n = {name:'wwj'};
  let m = n;
  m.name = '学习';
  console.log(n.name);//学习

  // 浏览器想要执行JS代码:
  // 1.从电脑内存中分配出一块内存,用来执行代码(栈内存=>stack)
  // 2.分配一个主线程用来自上而下执行JS代码
  
  // let a = 12;
  // 1.创建一个变量a,放到栈内存变量存储区域中
  // 2.创建一个值12,把它存储到当前栈内存值区域中(简单的基本类型值
  // 是这样存储的,复杂的引用类型值不是这样做的)
  // 3.=为赋值,其实赋值是让变量的值相互关联的过程

  // 复杂值(引用类型)的存储,又分成了三个步骤:
  // 1.在内存中分配出一块新内存,用来存储引用类型值(堆内存=>heap)
  // =>内存有一个16进制地址
  // 2.把对象中的键值对(属性名:属性值)依次存储到堆内存当中
  // 3.把堆内存地址和变量关联起来

  // 基本类型:按值操作(直接操作的是值),所以也叫做值类型
  // 引用类型:操作的是堆内存的地址(按引用地址操作的)
}
{
  let n = [10,20];
  let m = n;
  let x = m;
  m[0] = 100;
  x = [30,40];
  x[0] = 200;
  m = x;
  m[1] = 300;
  n[2] = 400;
  console.log(n,m,x);//[100,20,400] [200,300] [200,300] 
}
{
  let a = {
    n:1
  };
  let b = a;
  a.x = a = {
    n:2
  };
  console.log(a.x)
  console.log(b)
}